{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispath","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","CheckCircle","props","css","Text","Remove","TodoItemBlock","TodoItem","dispatch","onClick","React","memo","TodoListBlock","TodoList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4edc3693.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n\twidth:  512px;\r\n\theight: 768px;\r\n\r\n\tposition: relative; /*추후 박스 하단에 추가 버튼을 위치 시키기 위한 설정*/\r\n\tbackground: white;\r\n\tborder-radius: 16px;\r\n\tbox-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\r\n\r\n\tmargin: 0 auto;\r\n\r\n\tmargin: 96px auto 32px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n`\r\nfunction TodoTemplate({children}) {\r\n\treturn <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\n\r\nexport default TodoTemplate;\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n\t{\r\n\t\tid: 1,\r\n\t\ttext: '프로젝트 생성하기',\r\n\t\tdone: false\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\ttext: '컴포넌트 스타일링하기',\r\n\t\tdone: false\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\ttext: 'Context 만들기',\r\n\t\tdone: false\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\ttext: '기능 구현하기',\r\n\t\tdone: false\r\n\t},\r\n];\r\n\r\nfunction todoReducer(state, action) { //state와 action을 가져와서 그 다음 상태를 리턴\r\n\tswitch (action.type) {\r\n\t\tcase 'CREATE' : //새로운 항목 추가\r\n\t\t\treturn state.concat(action.todo); //action 안에 todo 항목 넣어 dispatch 하기\r\n\t\tcase 'TOGGLE' : // 껐다 켰다\r\n\t\t\treturn state.map(todo => // 모든 todo에 대하여 변환 \r\n\t\t\t\ttodo.id === action.id ? { ...todo, done: !todo.done } : todo  // todo.id가 action.id와 같다면, 해당 todo를 업데이트 해줍니다, done 값에  todo.done 값의 반대 / 다르다면 todo를 유지\r\n\t\t\t);\r\n\t\tcase 'REMOVE' : // 지우는거\r\n\t\t\treturn state.filter(todo => todo.id !== action.id );\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unhandled action type: ${action.type}`);\r\n\t}\r\n}\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n\tconst [state, dispath] = useReducer(todoReducer, initialTodos);\r\n\tconst nextId = useRef(5); //useRef?\r\n\r\n\treturn (\r\n\t\t<TodoStateContext.Provider value={state}>\r\n\t\t\t<TodoDispatchContext.Provider value={dispath}>\r\n\t\t\t\t<TodoNextIdContext.Provider value={nextId}>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</TodoNextIdContext.Provider>\r\n\t\t\t</TodoDispatchContext.Provider>\r\n\t\t</TodoStateContext.Provider>\r\n\t);\r\n}\r\n// 커스텀 Hook - 최적화를 위해서 나눔 (state, dispatch)\r\nexport function useTodoState() {\r\n\tconst context = useContext(TodoStateContext);\r\n\tif (!context) { //실수를 하였을때 빨리 알수 있도록 에러처리를 습관화 하는 것이 좋음\r\n\t\tthrow new Error('cannot find TodoProvider');\r\n\t}\r\n\treturn context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n\tconst context = useContext(TodoDispatchContext);\r\n\tif (!context) {\r\n\t\tthrow new Error('cannot find TodoProvider');\r\n\t}\r\n\treturn context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n\tconst context = useContext(TodoNextIdContext);\r\n\tif (!context) {\r\n\t\tthrow new Error('cannot find TodoProvider');\r\n\t}\r\n\treturn context;\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n\tmargin: 10px;\r\n\tpadding: 28px 22px 14px 22px;\r\n\tborder: 1px solid #e9ecef;\r\n\tborder-radius: 10px;\r\n\tbox-sizing: border-box;\r\n\r\n\th1 {\r\n\t\tmargin: 0;\r\n\t\tfont-size: 36px;\r\n\t\tcolor: #343a40;\r\n\t}\r\n\t.day {\r\n\t\tmargin-top: 4px;\r\n\t\tcolor: #868e96;\r\n\t\tfont-size: 21px;\r\n\t}\r\n\t.tasks-left {\r\n\t\tcolor: #20c997;\r\n\t\tfont-size: 18px;\r\n\t\tmargin-top: 40px;\r\n\t\tfont-weight: bold;\r\n\t}\r\n`;\r\n\r\nfunction TodoHead() {\r\n\tconst todos = useTodoState();\r\n\tconst undoneTasks = todos.filter(todo => !todo.done);\r\n\r\n\tconst today = new Date();\r\n\tconst dateString = today.toLocaleDateString('ko-KR', {\r\n\t\tyear: 'numeric', //DB의 Type - 정수 또는 소수 값을 저장할 수 있다.\r\n\t\tmonth: 'long',\r\n\t\tday: 'numeric'\r\n\t});\r\n\tconst dayName = today.toLocaleDateString('ko-KR', { weekday: 'long' });\r\n\r\n\treturn (\r\n\t\t<TodoHeadBlock>\r\n\t\t\t<h1>{dateString}</h1>\r\n\t\t\t<div className=\"day\">{dayName}</div>\r\n\t\t\t<div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n\t\t</TodoHeadBlock>\r\n\t);\r\n}\r\n\r\nexport default TodoHead;","import React from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from \"../TodoContext\";\r\n\r\nconst CheckCircle = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\twidth: 32px;\r\n\theight: 32px;\r\n\tborder-radius: 16px;\r\n\tborder: 1px solid #ced4da;\r\n\tfont-size: 24px;\r\n\tmargin-right: 20px;\r\n\tcursor: pointer;\r\n\t${props =>\r\n\t\tprops.done &&\r\n\t\tcss`\r\n\t\t\tborder: 1px solid #38d9a9;\r\n\t\t\tcolor: #38d9a9;\r\n\t\t`}\r\n`;\r\n\r\nconst Text = styled.div`\r\n\tflex: 1;\r\n\tfont-size: 21px;\r\n\tcolor: #495057;\r\n\t${props =>\r\n\t\tprops.done &&\r\n\t\tcss`\r\n\t\t\tcolor: #ced4da;\r\n\t\t`}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n\topacity: 0;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tcolor: #dee2e6;\r\n\tfont-size: 24px;\r\n\tcursor: pointer;\r\n\t&:hover {\r\n\t\tcolor: #ff6b6b;\r\n\t}\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tpadding: 12px 0;\r\n\t&:hover {\r\n\t\t${Remove} {\r\n      opacity: 1;\r\n    }\r\n\t}\r\n`;\r\n\r\nfunction TodoItem({ id, done, text }) { //비구조 할당 (props로 가져올거)\r\n\tconst dispatch = useTodoDispatch();\r\n\tconst onToggle = () => \r\n\t\tdispatch({ \r\n\t\t\ttype: 'TOGGLE', \r\n\t\t\tid \r\n\t\t});\r\n\tconst onRemove = () => \r\n\t\tdispatch({ \r\n\t\t\ttype: 'REMOVE', \r\n\t\t\tid \r\n\t\t});\r\n\r\n\treturn (\r\n\t\t<TodoItemBlock>\r\n\t\t\t<CheckCircle done={done} onClick={onToggle}>\r\n\t\t\t\t{done && <MdDone />} {/* done 값이 있다면 MdDone 값을 렌더링 */}\r\n\t\t\t</CheckCircle>\r\n\t\t\t<Text done={done}>{text}</Text>\r\n\t\t\t<Remove onClick={onRemove}>\r\n\t\t\t\t<MdDelete />\r\n\t\t\t</Remove>\r\n\t\t</TodoItemBlock>\r\n\t);\r\n}\r\n\r\nexport default React.memo(TodoItem); //컴포넌트 최적화 가능\r\n//React.memo를 사용하면 다른 항목이 업데이트 할때, 불필요한 리렌더링을 방지하게 되어 성능을 최적화 할 수 있게 됌.","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTodoState } from \"../TodoContext\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoListBlock = styled.div`\r\n\tflex: 1;\r\n\tpadding: 20px 32px 48px 32px;\r\n\tborder-top: 1px solid #e9ecef;\r\n\tbox-sizing: border-box;\r\n\toverflow-y: auto;\r\n`;\r\n\r\nfunction TodoList() {\r\n\tconst todos = useTodoState();\r\n\r\n\treturn (\r\n\t\t<TodoListBlock>\r\n\t\t\t{todos.map(todo => (\r\n\t\t\t\t<TodoItem \r\n\t\t\t\t\tkey={todo.id}\r\n\t\t\t\t\tid={todo.id}\r\n\t\t\t\t\ttext={todo.text}\r\n\t\t\t\t\tdone={todo.done}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</TodoListBlock>\r\n\t) \r\n}\r\n\r\nexport default TodoList;","import React, { useState } from \"react\"; //react에서 useState 불러오기 (상태관리가 필요)\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from \"../TodoContext\";\r\n\r\nconst CircleButton = styled.button`\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n  justify-content: center;\r\n\t\r\n\tposition: absolute;\r\n\tleft: 50%;\r\n\tbottom: 0;\r\n\ttransform: translate(-50%, 50%);\r\n\twidth: 80px;\r\n\theight: 80px;\r\n\tborder-radius: 50%;\r\n\tfont-size: 60px; //아이콘 크기\r\n\toutline: none;\r\n\tborder: none;\r\n\tcolor: white;\r\n\tcursor: pointer;\r\n\tz-index: 5;\r\n\ttransition: 0.125s all ease-in;\r\n\r\n\tbackground: #38d9a9;\r\n\t&:hover {\t\r\n\t\tbackground: #63e6be;\r\n\t}\r\n\t&:active {\r\n\t\tbackground: #20c997;\r\n\t}\r\n\r\n\t${props =>\r\n\t\tprops.open &&\r\n\t\tcss`\r\n\t\t\tbackground: #ff6b6b;\r\n\t\t\t&:hover {\r\n\t\t\t\tbackground: #ff8787;\r\n\t\t\t}\r\n\t\t\t&:active {\r\n\t\t\t\tbackground: #fa5252;\r\n\t\t\t}\r\n\t\t\ttransform: translate(-50%, 50%) rotate(45deg);\r\n\t\t`\r\n\t}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n\tposition: absolute;\r\n\twidth: 100%;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n\tbackground: #f8f9fa;\r\n\tpadding: 32px 32px 72px;\r\n\tborder-radius: 0 0 16px 16px;\r\n\tborder-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n\twidth: 100%;\r\n\tpadding: 12px;\r\n\tborder: 1px solid #dee2e6;\r\n\r\n\tborder-radius: 4px;\r\n\toutline: none;\r\n\tfont-size: 18px;\r\n\tbox-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n\tconst [open, setOpen] = useState(false); //open의 기본값은 false로 하겠다, setOpen은 현재 상태를 업데이트해주는 함수!! ('배열 비구조 할당, 구조분해'를 이용)\r\n\t//useState는 배열을 반환하게 됨.\r\n\r\n\tconst [value, setValue] = useState('');\r\n\r\n\tconst dispatch = useTodoDispatch();\r\n\tconst nextId = useTodoNextId();\r\n\r\n\tconst onToggle = () => setOpen(!open); //기존의 값을 반전\r\n\tconst onChange = e => setValue(e.target.value);\r\n\tconst onSubmit = e => {\r\n\t\te.preventDefault(); //새로고침 방지\r\n\t\tdispatch({\r\n\t\t\ttype: 'CREATE',\r\n\t\t\ttodo: {\r\n\t\t\t\tid: nextId.current,\r\n\t\t\t\ttext: value,\r\n\t\t\t\tdone: false\r\n\t\t\t}\r\n\t\t});\r\n\t\tsetValue('');\r\n\t\tsetOpen(false);\r\n\t\tnextId.current += 1;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{open && (\r\n\t\t\t\t<InsertFormPositioner>\r\n\t\t\t\t\t<InsertForm onSubmit={onSubmit}>\r\n\t\t\t\t\t\t<Input \r\n\t\t\t\t\t\t\tautoFocus \r\n\t\t\t\t\t\t\tplaceholder=\"할 일을 입력 후, Enter를 누르세요\" \r\n\t\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t</InsertForm>\r\n\t\t\t\t</InsertFormPositioner>\r\n\t\t\t)}\r\n\t\t\t<CircleButton onClick={onToggle} open={open}>\r\n\t\t\t\t<MdAdd />\r\n\t\t\t</CircleButton>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default React.memo(TodoCreate);\r\n","import React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from \"./components/TodoHead\";\nimport TodoList from \"./components/TodoList\";\nimport TodoCreate from \"./components/TodoCreate\";\nimport { TodoProvider } from './TodoContext';\n// import InputSample from \"./components/test/InputSample\";\n\n\nconst GlobalStyle = createGlobalStyle`\n\tbody {\n\t\tbackground: #e9ecef;\n\t}\n`\n// 템플릿 리터럴\n\nfunction App() {\n  return (\n\t\t<TodoProvider>\n\t\t\t<GlobalStyle />\n\t\t\t<TodoTemplate>\n\t\t\t\t<TodoHead />\n\t\t\t\t<TodoList />\n\t\t\t\t<TodoCreate />\n\t\t\t</TodoTemplate>\n\t\t</TodoProvider>\n\t\t// <InputSample></InputSample>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}